security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            custom_authenticators:
                - App\Security\JWTAuthenticator
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/user/refresh-login, roles: [ ROLE_USER ] }
        - { path: ^/user/logout, roles: [ ROLE_USER ] }
        - { path: ^/user/edit-password, roles: [ ROLE_USER ] }
        - { path: ^/user/basic-info, roles: [ ROLE_USER ] }
        - { path: ^/user/all, roles: [ ROLE_ADMIN ] }
        - { path: ^/user/admin-info/[0-9]+$, roles: [ ROLE_ADMIN ] }
        - { path: ^/user/revoke-token/[0-9]+$, roles: [ ROLE_USER ] }
        - { path: ^/user/all-token$, roles: [ ROLE_USER ] }
        - { path: ^/user/create$, roles: [ ROLE_ADMIN ] }
        - { path: ^/search/card, roles: [ ROLE_USER ] }
        - { path: ^/archetype/all, roles: [ ROLE_USER ] }
        - { path: ^/card-attribute/all, roles: [ ROLE_USER ] }
        - { path: ^/category/all, roles: [ ROLE_USER ] }
        - { path: ^/property-type/all, roles: [ ROLE_USER ] }
        - { path: ^/sub-property-type/all, roles: [ ROLE_USER ] }
        - { path: ^/sub-type/all, roles: [ ROLE_USER ] }
        - { path: ^/type/all, roles: [ ROLE_USER ] }
        - { path: ^/card/info/.+, roles: [ ROLE_USER ] }
        - { path: ^/deck/create, roles: [ ROLE_USER ] }
        - { path: ^/search/card, roles: [ ROLE_USER ] }
        - { path: ^/search/set, roles: [ ROLE_USER ] }
        - { path: ^/search/deck-current-user, roles: [ ROLE_USER ] }
        - { path: ^/search/collection-current-user, roles: [ ROLE_USER ] }
        - { path: ^/deck/info/[0-9]+$, roles: [ ROLE_USER ] }
        - { path: ^/deck/delete/[0-9]+$, roles: [ ROLE_USER ] }
        - { path: ^/deck/update-public/[0-9]+/[0-1]$, roles: [ ROLE_USER ] }
        - { path: ^/deck/edit/[0-9]+$, roles: [ ROLE_USER ] }
        - { path: ^/set/info/[0-9]+$, roles: [ ROLE_USER ] }
        - { path: ^/country/all$, roles: [ ROLE_USER ] }
        - { path: ^/card-collection/create$, roles: [ ROLE_USER ] }
        - { path: ^/card-collection/info/[0-9]+$, roles: [ ROLE_USER ] }
        - { path: ^/card-collection/update-public/[0-9]+/[0-1]$, roles: [ ROLE_USER ] }
        - { path: ^/card-collection/update/[0-9]+$, roles: [ ROLE_USER ] }
        - { path: ^/card-collection/delete/[0-9]+$, roles: [ ROLE_USER ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
